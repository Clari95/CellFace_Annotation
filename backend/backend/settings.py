"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from decouple import config
import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, LDAPGroupQuery
from .utils import join_ldap_group_querys


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(config('DEBUG')))
print('DEBUG: {}'.format(DEBUG))

ALLOWED_HOSTS = [
    '*'
    #config('FRONTEND_URL')
]   # NOTE NOT SAFE FOR PROD

# CORS_ORIGIN_ALLOW_ALL = True
# # TODO: this ^ is bad, should use white list: https://github.com/adamchainz/django-cors-headers

#CORS_ORIGIN_WHITELIST = [
#    config('FRONTEND_URL')
#] # TODO: add production url

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'cellbase.apps.CellbaseConfig',
    'labeling.apps.LabelingConfig',
    'django_extensions',                # so that we can use debugger
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'background_task',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# TODO: connect to a real file system
# added by me to fake a file system

# MEDIA_ROOT is the absolute server path to the static folder
# mentioned above. That means it should be something like:
if config('MEDIA_ROOT'):
    MEDIA_ROOT = config('MEDIA_ROOT')
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# MEDIA_URL is the relative browser URL you should access
# your media files from when you are looking at the site.
# It should be (usually)
MEDIA_URL = 'media/'

FILE_UPLOAD_PERMISSIONS = 0o644

# Specify directory for storing uploaded temporary files
if config('FILE_UPLOAD_TEMP_DIR'):
    FILE_UPLOAD_TEMP_DIR = config('FILE_UPLOAD_TEMP_DIR')

# ultimately, not yet used
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/usr/src/app/cache',
        'TIMEOUT': 600,                 # 10 minutes until expiration
        'OPTIONS': {
            'MAX_ENTRIES': 10000        # 10k max entries
        },

    },
}

# set up of preview images' cache
PREVIEW_ROOT = os.path.join(BASE_DIR, "cache")
# MEDIA_URL is the relative browser URL you should access
# your media files from when you are looking at the site.
PREVIEW_URL = 'cache/'

# For dealing with large uploads, might need to tweak these config values
# FILE_UPLOAD_MAX_MEMORY_SIZE = 5368709120
# DATA_UPLOAD_MAX_MEMORY_SIZE = 5368709120

CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False


LOGIN_URL = 'login'

# LDAP
# See: https://django-auth-ldap.readthedocs.io/en/latest/install.html

LDAP_BASE = config('LDAP_BASE')
USERS_DN = 'ou=Users,' + LDAP_BASE
GROUPS_DN = 'ou=Groups,' + LDAP_BASE
RESOURCES_DN = 'ou=Resources,' + LDAP_BASE

AUTH_LDAP_SERVER_URI = config('LDAP_SERVER_URI')

AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = True

AUTH_LDAP_PROXY_USER = config('LDAP_PROXY_USER')          # probably not needed
AUTH_LDAP_PROXY_PASSWORD = config('LDAP_PROXY_PASSWORD')  # probably not needed

AUTH_LDAP_USER_SEARCH = LDAPSearch(
    USERS_DN, ldap.SCOPE_SUBTREE, '(cn=%(user)s)',
)

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    GROUPS_DN, ldap.SCOPE_SUBTREE, '(objectClass=group)',
)

AUTH_LDAP_USER_DN_TEMPLATE = 'cn=%(user)s,' + USERS_DN

AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr='cn')

#AUTH_LDAP_REQUIRE_GROUP = 'CN=TUEILDVGV-0GRMIT,' + GROUPS_DN

STAFF = config('LDAP_STAFF').split(",")
SUPERUSERS = config('LDAP_SUPERUSER').split(",")

AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_staff": join_ldap_group_querys(set(STAFF+SUPERUSERS), GROUPS_DN),
    "is_superuser": join_ldap_group_querys(SUPERUSERS, GROUPS_DN),
}

# This is the default, but I like to be explicit.
AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Cache distinguised names and group memberships for an hour to minimize
# LDAP traffic.
AUTH_LDAP_CACHE_TIMEOUT = 3600

## Backends used for User authentication, in order
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "django_auth_ldap.backend.LDAPBackend",
]
